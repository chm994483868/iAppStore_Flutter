// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:iappstore_flutter/models/app_detail_m_entity.dart';
import 'package:iappstore_flutter/models/app_rank_m_entity.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);

class JsonConvert {
	static final Map<String, JsonConvertFunction> _convertFuncMap = {
		(AppDetailMEntity).toString(): AppDetailMEntity.fromJson,
		(AppDetailMResults).toString(): AppDetailMResults.fromJson,
		(AppRankMEntity).toString(): AppRankMEntity.fromJson,
		(AppRankMFeed).toString(): AppRankMFeed.fromJson,
		(AppRankMFeedAuthor).toString(): AppRankMFeedAuthor.fromJson,
		(AppRankMFeedAuthorName).toString(): AppRankMFeedAuthorName.fromJson,
		(AppRankMFeedAuthorUri).toString(): AppRankMFeedAuthorUri.fromJson,
		(AppRankMFeedEntry).toString(): AppRankMFeedEntry.fromJson,
		(AppRankMFeedEntryImname).toString(): AppRankMFeedEntryImname.fromJson,
		(AppRankMFeedEntryImimage).toString(): AppRankMFeedEntryImimage.fromJson,
		(AppRankMFeedEntryImimageAttributes).toString(): AppRankMFeedEntryImimageAttributes.fromJson,
		(AppRankMFeedEntrySummary).toString(): AppRankMFeedEntrySummary.fromJson,
		(AppRankMFeedEntryImprice).toString(): AppRankMFeedEntryImprice.fromJson,
		(AppRankMFeedEntryImpriceAttributes).toString(): AppRankMFeedEntryImpriceAttributes.fromJson,
		(AppRankMFeedEntryImcontentType).toString(): AppRankMFeedEntryImcontentType.fromJson,
		(AppRankMFeedEntryImcontentTypeAttributes).toString(): AppRankMFeedEntryImcontentTypeAttributes.fromJson,
		(AppRankMFeedEntryRights).toString(): AppRankMFeedEntryRights.fromJson,
		(AppRankMFeedEntryTitle).toString(): AppRankMFeedEntryTitle.fromJson,
		(AppRankMFeedEntryLink).toString(): AppRankMFeedEntryLink.fromJson,
		(AppRankMFeedEntryLinkAttributes).toString(): AppRankMFeedEntryLinkAttributes.fromJson,
		(AppRankMFeedEntryLinkImduration).toString(): AppRankMFeedEntryLinkImduration.fromJson,
		(AppRankMFeedEntryId).toString(): AppRankMFeedEntryId.fromJson,
		(AppRankMFeedEntryIdAttributes).toString(): AppRankMFeedEntryIdAttributes.fromJson,
		(AppRankMFeedEntryImartist).toString(): AppRankMFeedEntryImartist.fromJson,
		(AppRankMFeedEntryImartistAttributes).toString(): AppRankMFeedEntryImartistAttributes.fromJson,
		(AppRankMFeedEntryCategory).toString(): AppRankMFeedEntryCategory.fromJson,
		(AppRankMFeedEntryCategoryAttributes).toString(): AppRankMFeedEntryCategoryAttributes.fromJson,
		(AppRankMFeedEntryImreleaseDate).toString(): AppRankMFeedEntryImreleaseDate.fromJson,
		(AppRankMFeedEntryImreleaseDateAttributes).toString(): AppRankMFeedEntryImreleaseDateAttributes.fromJson,
		(AppRankMFeedUpdated).toString(): AppRankMFeedUpdated.fromJson,
		(AppRankMFeedRights).toString(): AppRankMFeedRights.fromJson,
		(AppRankMFeedTitle).toString(): AppRankMFeedTitle.fromJson,
		(AppRankMFeedIcon).toString(): AppRankMFeedIcon.fromJson,
		(AppRankMFeedLink).toString(): AppRankMFeedLink.fromJson,
		(AppRankMFeedLinkAttributes).toString(): AppRankMFeedLinkAttributes.fromJson,
		(AppRankMFeedId).toString(): AppRankMFeedId.fromJson,
	};

  T? convert<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    return asT<T>(value);
  }

  List<T?>? convertList<T>(List<dynamic>? value) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => asT<T>(e)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => asT<T>(e)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? asT<T extends Object?>(dynamic value) {
    if(value == null){
      return null;
    }
    if (value is T) {
      return value;
    }
    final String type = T.toString();
    try {
      final String valueS = value.toString();
      if (type == "String") {
        return valueS as T;
      } else if (type == "int") {
        final int? intValue = int.tryParse(valueS);
        if (intValue == null) {
          return double.tryParse(valueS)?.toInt() as T?;
        } else {
          return intValue as T;
        }
      } else if (type == "double") {
        return double.parse(valueS) as T;
      } else if (type == "DateTime") {
        return DateTime.parse(valueS) as T;
      } else if (type == "bool") {
        if (valueS == '0' || valueS == '1') {
          return (valueS == '1') as T;
        }
        return (valueS == 'true') as T;
      } else if (type == "Map" || type.startsWith("Map<")) {
        return value as T;
      } else {
        if (_convertFuncMap.containsKey(type)) {
          return _convertFuncMap[type]!(value) as T;
        } else {
          throw UnimplementedError('$type unimplemented');
        }
      }
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<AppDetailMEntity>[] is M){
			return data.map<AppDetailMEntity>((Map<String, dynamic> e) => AppDetailMEntity.fromJson(e)).toList() as M;
		}
		if(<AppDetailMResults>[] is M){
			return data.map<AppDetailMResults>((Map<String, dynamic> e) => AppDetailMResults.fromJson(e)).toList() as M;
		}
		if(<AppRankMEntity>[] is M){
			return data.map<AppRankMEntity>((Map<String, dynamic> e) => AppRankMEntity.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeed>[] is M){
			return data.map<AppRankMFeed>((Map<String, dynamic> e) => AppRankMFeed.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedAuthor>[] is M){
			return data.map<AppRankMFeedAuthor>((Map<String, dynamic> e) => AppRankMFeedAuthor.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedAuthorName>[] is M){
			return data.map<AppRankMFeedAuthorName>((Map<String, dynamic> e) => AppRankMFeedAuthorName.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedAuthorUri>[] is M){
			return data.map<AppRankMFeedAuthorUri>((Map<String, dynamic> e) => AppRankMFeedAuthorUri.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntry>[] is M){
			return data.map<AppRankMFeedEntry>((Map<String, dynamic> e) => AppRankMFeedEntry.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImname>[] is M){
			return data.map<AppRankMFeedEntryImname>((Map<String, dynamic> e) => AppRankMFeedEntryImname.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImimage>[] is M){
			return data.map<AppRankMFeedEntryImimage>((Map<String, dynamic> e) => AppRankMFeedEntryImimage.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImimageAttributes>[] is M){
			return data.map<AppRankMFeedEntryImimageAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryImimageAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntrySummary>[] is M){
			return data.map<AppRankMFeedEntrySummary>((Map<String, dynamic> e) => AppRankMFeedEntrySummary.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImprice>[] is M){
			return data.map<AppRankMFeedEntryImprice>((Map<String, dynamic> e) => AppRankMFeedEntryImprice.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImpriceAttributes>[] is M){
			return data.map<AppRankMFeedEntryImpriceAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryImpriceAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImcontentType>[] is M){
			return data.map<AppRankMFeedEntryImcontentType>((Map<String, dynamic> e) => AppRankMFeedEntryImcontentType.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImcontentTypeAttributes>[] is M){
			return data.map<AppRankMFeedEntryImcontentTypeAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryImcontentTypeAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryRights>[] is M){
			return data.map<AppRankMFeedEntryRights>((Map<String, dynamic> e) => AppRankMFeedEntryRights.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryTitle>[] is M){
			return data.map<AppRankMFeedEntryTitle>((Map<String, dynamic> e) => AppRankMFeedEntryTitle.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryLink>[] is M){
			return data.map<AppRankMFeedEntryLink>((Map<String, dynamic> e) => AppRankMFeedEntryLink.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryLinkAttributes>[] is M){
			return data.map<AppRankMFeedEntryLinkAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryLinkAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryLinkImduration>[] is M){
			return data.map<AppRankMFeedEntryLinkImduration>((Map<String, dynamic> e) => AppRankMFeedEntryLinkImduration.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryId>[] is M){
			return data.map<AppRankMFeedEntryId>((Map<String, dynamic> e) => AppRankMFeedEntryId.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryIdAttributes>[] is M){
			return data.map<AppRankMFeedEntryIdAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryIdAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImartist>[] is M){
			return data.map<AppRankMFeedEntryImartist>((Map<String, dynamic> e) => AppRankMFeedEntryImartist.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImartistAttributes>[] is M){
			return data.map<AppRankMFeedEntryImartistAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryImartistAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryCategory>[] is M){
			return data.map<AppRankMFeedEntryCategory>((Map<String, dynamic> e) => AppRankMFeedEntryCategory.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryCategoryAttributes>[] is M){
			return data.map<AppRankMFeedEntryCategoryAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryCategoryAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImreleaseDate>[] is M){
			return data.map<AppRankMFeedEntryImreleaseDate>((Map<String, dynamic> e) => AppRankMFeedEntryImreleaseDate.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedEntryImreleaseDateAttributes>[] is M){
			return data.map<AppRankMFeedEntryImreleaseDateAttributes>((Map<String, dynamic> e) => AppRankMFeedEntryImreleaseDateAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedUpdated>[] is M){
			return data.map<AppRankMFeedUpdated>((Map<String, dynamic> e) => AppRankMFeedUpdated.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedRights>[] is M){
			return data.map<AppRankMFeedRights>((Map<String, dynamic> e) => AppRankMFeedRights.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedTitle>[] is M){
			return data.map<AppRankMFeedTitle>((Map<String, dynamic> e) => AppRankMFeedTitle.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedIcon>[] is M){
			return data.map<AppRankMFeedIcon>((Map<String, dynamic> e) => AppRankMFeedIcon.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedLink>[] is M){
			return data.map<AppRankMFeedLink>((Map<String, dynamic> e) => AppRankMFeedLink.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedLinkAttributes>[] is M){
			return data.map<AppRankMFeedLinkAttributes>((Map<String, dynamic> e) => AppRankMFeedLinkAttributes.fromJson(e)).toList() as M;
		}
		if(<AppRankMFeedId>[] is M){
			return data.map<AppRankMFeedId>((Map<String, dynamic> e) => AppRankMFeedId.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.asT<M>(json);
		}
	}
}